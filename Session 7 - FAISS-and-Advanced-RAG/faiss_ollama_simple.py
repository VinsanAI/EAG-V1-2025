import faiss
import numpy as np
import requests
import json

# Demonstration of using FAISS with embeddings generated by a local Ollama server.
#
# Prerequisites:
# - Ollama running locally (default: http://localhost:11434)
# - The `nomic-embed-text` model pulled and available in Ollama
#   e.g., `ollama pull nomic-embed-text`
# - Python packages: faiss, numpy, requests

# Helper: Get an embedding vector for a given text from Ollama
# Returns a NumPy float32 array suitable for FAISS (L2 index expects float32)
def get_embeddings(text: str) -> np.ndarray:
    response = requests.post(
        "http://localhost:11434/api/embeddings",
        json={
            "model": "nomic-embed-text", 
            "prompt": text
        }
    )
    response.raise_for_status()
    return np.array(response.json()["embedding"], dtype=np.float32)

# Example corpus to index ("documents")
sentences = [
    "The early bird catches the worm.",
    "A stitch in time saves nine.",
    "Better late than never.",
    "Birds of a feather flock together."
]

# Generate embeddings for each sentence using the helper
embeddings = [get_embeddings(s) for s in sentences]
# The dimensionality of the embedding space (must match model output)
dimention = len(embeddings[0])
# Build a simple L2 (Euclidean) FAISS index with the correct dimension
index = faiss.IndexFlatL2(dimention)
# Add all sentence vectors to the index as a single contiguous array
index.add(np.stack(embeddings))

# Example query to search for the nearest neighbor in the indexed corpus
query = "Being early is the best way to be successful."
# Query vector must be 2D (n_queries x dim) for FAISS
query_embedding = get_embeddings(query).reshape(1,-1)
# Sanity checks: print shapes of the matrix we added and the query vector
print(np.stack(embeddings).shape)
print(query_embedding.shape)

# Perform a nearest-neighbor search (k=1 => best single match)
D, I = index.search(query_embedding, k=1)

# D contains distances; I contains indices of the nearest sentences
print(D)
print(I)
print(f"Closest match to: \"{query}\"")
print(f">>> {sentences[I[0][0]]}")